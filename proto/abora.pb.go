// Code generated by protoc-gen-go.
// source: proto/abora.proto
// DO NOT EDIT!

/*
Package aborapb is a generated protocol buffer package.

It is generated from these files:
	proto/abora.proto

It has these top-level messages:
	DoubleOrHold
	NoOptions
	Oscillator
	OscillatorOrHold
	PointSettings
	Point
	ADSREnvelope
	Envelope
	Defaults
	Chirp
	Chirps
*/
package aborapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type DoubleOrHold struct {
	// Types that are valid to be assigned to ValueOrHold:
	//	*DoubleOrHold_Value
	//	*DoubleOrHold_Hold
	ValueOrHold isDoubleOrHold_ValueOrHold `protobuf_oneof:"ValueOrHold"`
}

func (m *DoubleOrHold) Reset()                    { *m = DoubleOrHold{} }
func (m *DoubleOrHold) String() string            { return proto.CompactTextString(m) }
func (*DoubleOrHold) ProtoMessage()               {}
func (*DoubleOrHold) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isDoubleOrHold_ValueOrHold interface {
	isDoubleOrHold_ValueOrHold()
}

type DoubleOrHold_Value struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value,oneof"`
}
type DoubleOrHold_Hold struct {
	Hold bool `protobuf:"varint,2,opt,name=hold,oneof"`
}

func (*DoubleOrHold_Value) isDoubleOrHold_ValueOrHold() {}
func (*DoubleOrHold_Hold) isDoubleOrHold_ValueOrHold()  {}

func (m *DoubleOrHold) GetValueOrHold() isDoubleOrHold_ValueOrHold {
	if m != nil {
		return m.ValueOrHold
	}
	return nil
}

func (m *DoubleOrHold) GetValue() float64 {
	if x, ok := m.GetValueOrHold().(*DoubleOrHold_Value); ok {
		return x.Value
	}
	return 0
}

func (m *DoubleOrHold) GetHold() bool {
	if x, ok := m.GetValueOrHold().(*DoubleOrHold_Hold); ok {
		return x.Hold
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DoubleOrHold) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DoubleOrHold_OneofMarshaler, _DoubleOrHold_OneofUnmarshaler, _DoubleOrHold_OneofSizer, []interface{}{
		(*DoubleOrHold_Value)(nil),
		(*DoubleOrHold_Hold)(nil),
	}
}

func _DoubleOrHold_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DoubleOrHold)
	// ValueOrHold
	switch x := m.ValueOrHold.(type) {
	case *DoubleOrHold_Value:
		b.EncodeVarint(1<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Value))
	case *DoubleOrHold_Hold:
		t := uint64(0)
		if x.Hold {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("DoubleOrHold.ValueOrHold has unexpected type %T", x)
	}
	return nil
}

func _DoubleOrHold_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DoubleOrHold)
	switch tag {
	case 1: // ValueOrHold.value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.ValueOrHold = &DoubleOrHold_Value{math.Float64frombits(x)}
		return true, err
	case 2: // ValueOrHold.hold
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueOrHold = &DoubleOrHold_Hold{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _DoubleOrHold_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DoubleOrHold)
	// ValueOrHold
	switch x := m.ValueOrHold.(type) {
	case *DoubleOrHold_Value:
		n += proto.SizeVarint(1<<3 | proto.WireFixed64)
		n += 8
	case *DoubleOrHold_Hold:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NoOptions struct {
}

func (m *NoOptions) Reset()                    { *m = NoOptions{} }
func (m *NoOptions) String() string            { return proto.CompactTextString(m) }
func (*NoOptions) ProtoMessage()               {}
func (*NoOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Oscillator struct {
	// Types that are valid to be assigned to Oscillators:
	//	*Oscillator_Sine
	//	*Oscillator_Square
	Oscillators isOscillator_Oscillators `protobuf_oneof:"Oscillators"`
}

func (m *Oscillator) Reset()                    { *m = Oscillator{} }
func (m *Oscillator) String() string            { return proto.CompactTextString(m) }
func (*Oscillator) ProtoMessage()               {}
func (*Oscillator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isOscillator_Oscillators interface {
	isOscillator_Oscillators()
}

type Oscillator_Sine struct {
	Sine *NoOptions `protobuf:"bytes,1,opt,name=sine,oneof"`
}
type Oscillator_Square struct {
	Square *NoOptions `protobuf:"bytes,2,opt,name=square,oneof"`
}

func (*Oscillator_Sine) isOscillator_Oscillators()   {}
func (*Oscillator_Square) isOscillator_Oscillators() {}

func (m *Oscillator) GetOscillators() isOscillator_Oscillators {
	if m != nil {
		return m.Oscillators
	}
	return nil
}

func (m *Oscillator) GetSine() *NoOptions {
	if x, ok := m.GetOscillators().(*Oscillator_Sine); ok {
		return x.Sine
	}
	return nil
}

func (m *Oscillator) GetSquare() *NoOptions {
	if x, ok := m.GetOscillators().(*Oscillator_Square); ok {
		return x.Square
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Oscillator) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Oscillator_OneofMarshaler, _Oscillator_OneofUnmarshaler, _Oscillator_OneofSizer, []interface{}{
		(*Oscillator_Sine)(nil),
		(*Oscillator_Square)(nil),
	}
}

func _Oscillator_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Oscillator)
	// Oscillators
	switch x := m.Oscillators.(type) {
	case *Oscillator_Sine:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sine); err != nil {
			return err
		}
	case *Oscillator_Square:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Square); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Oscillator.Oscillators has unexpected type %T", x)
	}
	return nil
}

func _Oscillator_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Oscillator)
	switch tag {
	case 1: // Oscillators.sine
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NoOptions)
		err := b.DecodeMessage(msg)
		m.Oscillators = &Oscillator_Sine{msg}
		return true, err
	case 2: // Oscillators.square
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NoOptions)
		err := b.DecodeMessage(msg)
		m.Oscillators = &Oscillator_Square{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Oscillator_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Oscillator)
	// Oscillators
	switch x := m.Oscillators.(type) {
	case *Oscillator_Sine:
		s := proto.Size(x.Sine)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Oscillator_Square:
		s := proto.Size(x.Square)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OscillatorOrHold struct {
	// Types that are valid to be assigned to ValueOrHold:
	//	*OscillatorOrHold_Oscillator
	//	*OscillatorOrHold_Hold
	ValueOrHold isOscillatorOrHold_ValueOrHold `protobuf_oneof:"ValueOrHold"`
}

func (m *OscillatorOrHold) Reset()                    { *m = OscillatorOrHold{} }
func (m *OscillatorOrHold) String() string            { return proto.CompactTextString(m) }
func (*OscillatorOrHold) ProtoMessage()               {}
func (*OscillatorOrHold) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isOscillatorOrHold_ValueOrHold interface {
	isOscillatorOrHold_ValueOrHold()
}

type OscillatorOrHold_Oscillator struct {
	Oscillator *Oscillator `protobuf:"bytes,1,opt,name=oscillator,oneof"`
}
type OscillatorOrHold_Hold struct {
	Hold bool `protobuf:"varint,2,opt,name=hold,oneof"`
}

func (*OscillatorOrHold_Oscillator) isOscillatorOrHold_ValueOrHold() {}
func (*OscillatorOrHold_Hold) isOscillatorOrHold_ValueOrHold()       {}

func (m *OscillatorOrHold) GetValueOrHold() isOscillatorOrHold_ValueOrHold {
	if m != nil {
		return m.ValueOrHold
	}
	return nil
}

func (m *OscillatorOrHold) GetOscillator() *Oscillator {
	if x, ok := m.GetValueOrHold().(*OscillatorOrHold_Oscillator); ok {
		return x.Oscillator
	}
	return nil
}

func (m *OscillatorOrHold) GetHold() bool {
	if x, ok := m.GetValueOrHold().(*OscillatorOrHold_Hold); ok {
		return x.Hold
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OscillatorOrHold) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OscillatorOrHold_OneofMarshaler, _OscillatorOrHold_OneofUnmarshaler, _OscillatorOrHold_OneofSizer, []interface{}{
		(*OscillatorOrHold_Oscillator)(nil),
		(*OscillatorOrHold_Hold)(nil),
	}
}

func _OscillatorOrHold_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OscillatorOrHold)
	// ValueOrHold
	switch x := m.ValueOrHold.(type) {
	case *OscillatorOrHold_Oscillator:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oscillator); err != nil {
			return err
		}
	case *OscillatorOrHold_Hold:
		t := uint64(0)
		if x.Hold {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("OscillatorOrHold.ValueOrHold has unexpected type %T", x)
	}
	return nil
}

func _OscillatorOrHold_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OscillatorOrHold)
	switch tag {
	case 1: // ValueOrHold.oscillator
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Oscillator)
		err := b.DecodeMessage(msg)
		m.ValueOrHold = &OscillatorOrHold_Oscillator{msg}
		return true, err
	case 2: // ValueOrHold.hold
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ValueOrHold = &OscillatorOrHold_Hold{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _OscillatorOrHold_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OscillatorOrHold)
	// ValueOrHold
	switch x := m.ValueOrHold.(type) {
	case *OscillatorOrHold_Oscillator:
		s := proto.Size(x.Oscillator)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OscillatorOrHold_Hold:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PointSettings struct {
	Freq            *DoubleOrHold     `protobuf:"bytes,1,opt,name=freq" json:"freq,omitempty"`
	Amplitude       *DoubleOrHold     `protobuf:"bytes,2,opt,name=amplitude" json:"amplitude,omitempty"`
	TremoloStrength *DoubleOrHold     `protobuf:"bytes,3,opt,name=tremolo_strength" json:"tremolo_strength,omitempty"`
	TremoloFreq     *DoubleOrHold     `protobuf:"bytes,4,opt,name=tremolo_freq" json:"tremolo_freq,omitempty"`
	VibratoStrength *DoubleOrHold     `protobuf:"bytes,5,opt,name=vibrato_strength" json:"vibrato_strength,omitempty"`
	VibratoFreq     *DoubleOrHold     `protobuf:"bytes,6,opt,name=vibrato_freq" json:"vibrato_freq,omitempty"`
	Oscillator      *OscillatorOrHold `protobuf:"bytes,7,opt,name=oscillator" json:"oscillator,omitempty"`
}

func (m *PointSettings) Reset()                    { *m = PointSettings{} }
func (m *PointSettings) String() string            { return proto.CompactTextString(m) }
func (*PointSettings) ProtoMessage()               {}
func (*PointSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PointSettings) GetFreq() *DoubleOrHold {
	if m != nil {
		return m.Freq
	}
	return nil
}

func (m *PointSettings) GetAmplitude() *DoubleOrHold {
	if m != nil {
		return m.Amplitude
	}
	return nil
}

func (m *PointSettings) GetTremoloStrength() *DoubleOrHold {
	if m != nil {
		return m.TremoloStrength
	}
	return nil
}

func (m *PointSettings) GetTremoloFreq() *DoubleOrHold {
	if m != nil {
		return m.TremoloFreq
	}
	return nil
}

func (m *PointSettings) GetVibratoStrength() *DoubleOrHold {
	if m != nil {
		return m.VibratoStrength
	}
	return nil
}

func (m *PointSettings) GetVibratoFreq() *DoubleOrHold {
	if m != nil {
		return m.VibratoFreq
	}
	return nil
}

func (m *PointSettings) GetOscillator() *OscillatorOrHold {
	if m != nil {
		return m.Oscillator
	}
	return nil
}

type Point struct {
	// Relative time; first should be 0. Must be ascending.
	T        float64        `protobuf:"fixed64,1,opt,name=t" json:"t,omitempty"`
	Settings *PointSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Point) GetSettings() *PointSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type ADSREnvelope struct {
	AttackDuration  float64 `protobuf:"fixed64,1,opt,name=attack_duration" json:"attack_duration,omitempty"`
	DecayDuration   float64 `protobuf:"fixed64,2,opt,name=decay_duration" json:"decay_duration,omitempty"`
	ReleaseDuration float64 `protobuf:"fixed64,3,opt,name=release_duration" json:"release_duration,omitempty"`
	SustainLevel    float64 `protobuf:"fixed64,4,opt,name=sustain_level" json:"sustain_level,omitempty"`
}

func (m *ADSREnvelope) Reset()                    { *m = ADSREnvelope{} }
func (m *ADSREnvelope) String() string            { return proto.CompactTextString(m) }
func (*ADSREnvelope) ProtoMessage()               {}
func (*ADSREnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Envelope struct {
	// Types that are valid to be assigned to EnvelopeKind:
	//	*Envelope_Adsr
	EnvelopeKind isEnvelope_EnvelopeKind `protobuf_oneof:"EnvelopeKind"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isEnvelope_EnvelopeKind interface {
	isEnvelope_EnvelopeKind()
}

type Envelope_Adsr struct {
	Adsr *ADSREnvelope `protobuf:"bytes,1,opt,name=adsr,oneof"`
}

func (*Envelope_Adsr) isEnvelope_EnvelopeKind() {}

func (m *Envelope) GetEnvelopeKind() isEnvelope_EnvelopeKind {
	if m != nil {
		return m.EnvelopeKind
	}
	return nil
}

func (m *Envelope) GetAdsr() *ADSREnvelope {
	if x, ok := m.GetEnvelopeKind().(*Envelope_Adsr); ok {
		return x.Adsr
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Envelope) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Envelope_OneofMarshaler, _Envelope_OneofUnmarshaler, _Envelope_OneofSizer, []interface{}{
		(*Envelope_Adsr)(nil),
	}
}

func _Envelope_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Envelope)
	// EnvelopeKind
	switch x := m.EnvelopeKind.(type) {
	case *Envelope_Adsr:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Adsr); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Envelope.EnvelopeKind has unexpected type %T", x)
	}
	return nil
}

func _Envelope_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Envelope)
	switch tag {
	case 1: // EnvelopeKind.adsr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ADSREnvelope)
		err := b.DecodeMessage(msg)
		m.EnvelopeKind = &Envelope_Adsr{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Envelope_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Envelope)
	// EnvelopeKind
	switch x := m.EnvelopeKind.(type) {
	case *Envelope_Adsr:
		s := proto.Size(x.Adsr)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Defaults struct {
	Initial  *PointSettings `protobuf:"bytes,1,opt,name=initial" json:"initial,omitempty"`
	Envelope *Envelope      `protobuf:"bytes,2,opt,name=envelope" json:"envelope,omitempty"`
}

func (m *Defaults) Reset()                    { *m = Defaults{} }
func (m *Defaults) String() string            { return proto.CompactTextString(m) }
func (*Defaults) ProtoMessage()               {}
func (*Defaults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Defaults) GetInitial() *PointSettings {
	if m != nil {
		return m.Initial
	}
	return nil
}

func (m *Defaults) GetEnvelope() *Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type Chirp struct {
	BeginTime        float64   `protobuf:"fixed64,1,opt,name=begin_time" json:"begin_time,omitempty"`
	Duration         float64   `protobuf:"fixed64,2,opt,name=duration" json:"duration,omitempty"`
	Points           []*Point  `protobuf:"bytes,3,rep,name=points" json:"points,omitempty"`
	DefaultsOverride *Defaults `protobuf:"bytes,4,opt,name=defaults_override" json:"defaults_override,omitempty"`
}

func (m *Chirp) Reset()                    { *m = Chirp{} }
func (m *Chirp) String() string            { return proto.CompactTextString(m) }
func (*Chirp) ProtoMessage()               {}
func (*Chirp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Chirp) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *Chirp) GetDefaultsOverride() *Defaults {
	if m != nil {
		return m.DefaultsOverride
	}
	return nil
}

type Chirps struct {
	Chirp    []*Chirp  `protobuf:"bytes,1,rep,name=chirp" json:"chirp,omitempty"`
	Defaults *Defaults `protobuf:"bytes,2,opt,name=defaults" json:"defaults,omitempty"`
}

func (m *Chirps) Reset()                    { *m = Chirps{} }
func (m *Chirps) String() string            { return proto.CompactTextString(m) }
func (*Chirps) ProtoMessage()               {}
func (*Chirps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Chirps) GetChirp() []*Chirp {
	if m != nil {
		return m.Chirp
	}
	return nil
}

func (m *Chirps) GetDefaults() *Defaults {
	if m != nil {
		return m.Defaults
	}
	return nil
}

func init() {
	proto.RegisterType((*DoubleOrHold)(nil), "aborapb.DoubleOrHold")
	proto.RegisterType((*NoOptions)(nil), "aborapb.NoOptions")
	proto.RegisterType((*Oscillator)(nil), "aborapb.Oscillator")
	proto.RegisterType((*OscillatorOrHold)(nil), "aborapb.OscillatorOrHold")
	proto.RegisterType((*PointSettings)(nil), "aborapb.PointSettings")
	proto.RegisterType((*Point)(nil), "aborapb.Point")
	proto.RegisterType((*ADSREnvelope)(nil), "aborapb.ADSREnvelope")
	proto.RegisterType((*Envelope)(nil), "aborapb.Envelope")
	proto.RegisterType((*Defaults)(nil), "aborapb.Defaults")
	proto.RegisterType((*Chirp)(nil), "aborapb.Chirp")
	proto.RegisterType((*Chirps)(nil), "aborapb.Chirps")
}

var fileDescriptor0 = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x94, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x97, 0x35, 0x49, 0xd3, 0xdb, 0x3f, 0x6b, 0x8d, 0x36, 0xca, 0x03, 0x08, 0x19, 0x10,
	0x43, 0x40, 0x27, 0xc1, 0x2b, 0x42, 0x1a, 0x14, 0xa9, 0x12, 0x88, 0x22, 0x26, 0x21, 0x1e, 0x90,
	0x2a, 0xa7, 0xf1, 0x5a, 0x0b, 0x37, 0xce, 0x6c, 0xa7, 0x12, 0xe2, 0x13, 0xf2, 0xad, 0x70, 0x5d,
	0x27, 0x21, 0x1b, 0x5d, 0xdf, 0xfc, 0xe7, 0xfa, 0x77, 0xee, 0x39, 0xbd, 0x0d, 0x0c, 0x32, 0x29,
	0xb4, 0x38, 0x23, 0xb1, 0x90, 0x64, 0x64, 0xd7, 0xa8, 0x69, 0x37, 0x59, 0x8c, 0xdf, 0x42, 0x67,
	0x2c, 0xf2, 0x98, 0xd3, 0xa9, 0x9c, 0x08, 0x9e, 0xa0, 0x23, 0x08, 0xd6, 0x84, 0xe7, 0x74, 0xe8,
	0x3d, 0xf4, 0x4e, 0xbd, 0xc9, 0x01, 0xea, 0x81, 0xbf, 0x34, 0x17, 0xc3, 0x43, 0xb3, 0x8f, 0x26,
	0x07, 0xef, 0xba, 0xd0, 0xfe, 0xb6, 0x29, 0xd8, 0xd6, 0xe3, 0x36, 0xb4, 0x3e, 0x8b, 0x69, 0xa6,
	0x99, 0x48, 0x15, 0xa6, 0x00, 0x53, 0x35, 0x67, 0x9c, 0x13, 0x2d, 0x24, 0xc2, 0xe0, 0x2b, 0x96,
	0x6e, 0x49, 0xed, 0x57, 0x68, 0xe4, 0x24, 0x47, 0x65, 0xbd, 0xa1, 0x3f, 0x86, 0x50, 0x5d, 0xe5,
	0x44, 0x52, 0xcb, 0xdf, 0x51, 0xb5, 0xd1, 0xac, 0xb8, 0x0a, 0xff, 0x80, 0x7e, 0xb5, 0x75, 0x7d,
	0x3f, 0x03, 0x10, 0xe5, 0x99, 0x93, 0xbc, 0x53, 0xc2, 0xaa, 0xf2, 0xfd, 0x8e, 0xfe, 0x1c, 0x42,
	0xf7, 0x8b, 0x60, 0xa9, 0xbe, 0xa0, 0x5a, 0xb3, 0x74, 0xa1, 0xd0, 0x23, 0xf0, 0x2f, 0x25, 0xbd,
	0x72, 0xd4, 0xe3, 0x92, 0x5a, 0x0b, 0xee, 0x14, 0x5a, 0x64, 0x95, 0x71, 0xa6, 0xf3, 0xa4, 0x30,
	0xb3, 0xa3, 0xf2, 0x0c, 0xfa, 0x5a, 0xd2, 0x95, 0xe0, 0x62, 0xa6, 0xcc, 0x22, 0x5d, 0xe8, 0xe5,
	0xb0, 0x71, 0xdb, 0x83, 0xe7, 0xd0, 0x29, 0x1e, 0xd8, 0x3e, 0xfc, 0x3d, 0xf4, 0x35, 0x8b, 0xa5,
	0xf1, 0x5a, 0xd1, 0x83, 0x3d, 0xf4, 0xe2, 0x81, 0xa5, 0x87, 0xb7, 0x15, 0xbf, 0xac, 0xc5, 0xdc,
	0xb4, 0xa5, 0xf7, 0xfe, 0x13, 0xb3, 0xcb, 0xf2, 0x0d, 0x04, 0x36, 0x4a, 0xd4, 0x02, 0x4f, 0x6f,
	0x47, 0xca, 0x04, 0x15, 0x29, 0x97, 0xac, 0xcb, 0xe9, 0xa4, 0x04, 0xd4, 0x72, 0xc7, 0x19, 0x74,
	0xce, 0xc7, 0x17, 0x5f, 0x3f, 0xa4, 0x6b, 0xca, 0x45, 0x46, 0xd1, 0x5d, 0x38, 0x22, 0x5a, 0x93,
	0xf9, 0xcf, 0x59, 0x92, 0x9b, 0x7e, 0xcd, 0x70, 0x38, 0xe4, 0x09, 0xf4, 0x12, 0x3a, 0x27, 0xbf,
	0xaa, 0xf3, 0x43, 0x7b, 0x3e, 0x84, 0xbe, 0xa4, 0x9c, 0x12, 0x45, 0xab, 0x9b, 0x86, 0xbd, 0x39,
	0x86, 0xae, 0xca, 0x95, 0x26, 0x2c, 0x9d, 0x71, 0x6a, 0xf0, 0x36, 0x53, 0x0f, 0x9f, 0x43, 0x54,
	0xaa, 0x3d, 0x01, 0x9f, 0x24, 0x4a, 0xde, 0xf8, 0xd5, 0xff, 0x6d, 0xc9, 0x4c, 0x4f, 0x0f, 0x3a,
	0xc5, 0xee, 0x23, 0x4b, 0x13, 0xfc, 0x1d, 0xa2, 0x31, 0xbd, 0x24, 0x39, 0xd7, 0x0a, 0x3d, 0x85,
	0x26, 0x4b, 0x99, 0x66, 0x84, 0x3b, 0xca, 0x0e, 0xa7, 0x66, 0xc2, 0x22, 0xea, 0x20, 0x2e, 0x93,
	0x41, 0x59, 0x59, 0xd0, 0xf1, 0x6f, 0x08, 0xde, 0x2f, 0x99, 0xcc, 0x10, 0x02, 0x88, 0xe9, 0xc2,
	0xb4, 0xae, 0xd9, 0xca, 0xfd, 0x51, 0x51, 0x1f, 0xa2, 0x6b, 0xe6, 0x1f, 0x40, 0x98, 0x6d, 0x44,
	0x94, 0xb1, 0xdc, 0x30, 0xc4, 0x5e, 0x5d, 0x1b, 0xbd, 0x80, 0x41, 0xe2, 0x1a, 0x9d, 0x89, 0x35,
	0x95, 0x92, 0x99, 0xc1, 0xf5, 0xaf, 0x89, 0x17, 0x56, 0xf0, 0x27, 0x08, 0xad, 0xb8, 0x42, 0xf7,
	0x21, 0x98, 0x6f, 0x56, 0x46, 0xb8, 0x8e, 0xdd, 0x36, 0x67, 0xac, 0x14, 0xd8, 0x1b, 0x56, 0x0a,
	0x5a, 0x1c, 0xda, 0xaf, 0xd0, 0xeb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x41, 0x9f, 0x1c, 0x14,
	0x9a, 0x04, 0x00, 0x00,
}
